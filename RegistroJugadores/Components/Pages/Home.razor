@page "/"
@using Microsoft.EntityFrameworkCore
@inject JugadoresService jugadoresService
@using RegistroJugadores.DAL
@inject IDbContextFactory<Contexto> dbFactory

<PageTitle>Home</PageTitle>
<div class="container mx-auto max-w-lg p-6 bg-white rounded-lg shadow-xl text-center">

    <div class="game-container">
        @if (!gameStarted)
        {
            <!-- PANTALLA DE SELECCIÓN DE JUGADOR -->
            <div class="selection-screen">
                <h1>Elige tus jugadores</h1>
                <!-- Selección Jugador X -->
                <div class="col-md mb-3">
                    <label><strong>Jugador X:</strong></label>
                    <InputSelect class="form-select" @bind-Value="Partida.Jugador1Id" @onchange="OnJugador1Changed">
                        <option value="0" disabled selected>Seleccione Jugador X</option>
                        @foreach (var jugador in ListaJugadores)
                        {
                            <option value="@jugador.JugadorId" disabled ="@(jugador.JugadorId == Partida.Jugador2Id)">
                                @jugador.Nombres
                             </option>
                        }
                    </InputSelect>
                </div>

                <!-- Selección Jugador O -->
                <div class="mb-3">
                    <label><strong>Jugador O:</strong></label>
                    <InputSelect class="form-select" @bind-Value="Partida.Jugador2Id" @onchange="OnJugador2Changed">
                        <option value="0" disabled selected> Seleccione Jugador O</option>
                        @foreach (var jugador in ListaJugadores)
                        {
                            <option value="@jugador.JugadorId" disabled="@(jugador.JugadorId == Partida.Jugador1Id)">
                                @jugador.Nombres
                            </option>
                        }
                    </InputSelect>
                </div>
                <div class="text-center mt-3">
                    <button class="btn btn-success btn-lg" @onclick="StartGame"
                            disabled="@(Partida.Jugador1Id == 0 || Partida.Jugador2Id == 0 || Partida.Jugador1Id == Partida.Jugador2Id)">
                        Iniciar Partida
                    </button>
                </div>
            </div>
        }
        else
        {
            <!-- PANTALLA DE JUEGO -->
            <div class="game-screen">
                <h2 class="game-status">@GameStatus</h2>

                <div class="game-board">
                    @for (var i = 0; i < 9; i++)
                    {
                        var cellIndex = i; // Copia local para evitar problemas con el closure en el lambda
                                           <button class="cell @GetPlayerClass(board[cellIndex])"
                                                   @onclick="() => HandleCellClick(cellIndex)"
                                                   disabled="@(board[cellIndex] != null || winner != null || esEmpate)">
                                               @board[cellIndex]?.ToString()
                                           </button>
                    }
                </div>

                <button class="btn btn-secondary mt-4" @onclick="RestartGame">
                    Reiniciar Juego
                </button>
            </div>
        }
    </div>
</div>

@code {
    private enum PlayerType { X, O }
    private Partidas Partida { get; set; } = new Partidas()
        {
            Jugador1Id = 0,
            Jugador2Id = 0
        };
    public int JugadorXId { get; set; }
    public int JugadorOId { get; set; }
    private bool gameStarted;
    private PlayerType?[] board = new PlayerType?[9];
    private PlayerType _currentPlayerType = PlayerType.X;
    private PlayerType? winner;
    private bool esEmpate;
    public List<Jugadores> ListaJugadores { get; set; } = new();
    private int partidaId;

    private string GameStatus
    {
        get
        {
            if (winner != null) return $"🏆 ¡Ganador: {GetJugadorNombre(winner.Value)}!";
            return esEmpate
                ? "🤝 ¡Es un empate!"
                : $"Turno de: {GetJugadorNombre(_currentPlayerType)}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ListaJugadores = await jugadoresService.Listar(jugador => true);

        using var db = await dbFactory.CreateDbContextAsync();

        // Buscar partida en curso
        var partidaEnCurso = await db.Partidas
            .Include(p => p.Movimientos)
            .OrderByDescending(p => p.PartidaId)
            .FirstOrDefaultAsync(p => p.EstadoPartida == "En curso");

        if (partidaEnCurso != null)
        {
            // Cargar la partida existente
            Partida = partidaEnCurso;
            partidaId = partidaEnCurso.PartidaId;
            gameStarted = true;

            // Reconstruir tablero
            board = new PlayerType?[9];
            foreach (var movimiento in partidaEnCurso.Movimientos)
            {
                var index = movimiento.PosicionFila * 3 + movimiento.PosicionColumna;
                board[index] = movimiento.JugadorId == partidaEnCurso.Jugador1Id
                    ? PlayerType.X
                    : PlayerType.O;
            }

            // Determinar turno
            _currentPlayerType = partidaEnCurso.TurnoJugadorId == partidaEnCurso.Jugador1Id
                ? PlayerType.X
                : PlayerType.O;
        }
        else
        {
            // No hay partida activa
            gameStarted = false;
            board = new PlayerType?[9];
        }
    }

    private void OnJugador1Changed(ChangeEventArgs e)
    {

        _currentPlayerType = PlayerType.X;
    }

    private void OnJugador2Changed(ChangeEventArgs e)
    {
        _currentPlayerType = PlayerType.X;
    }

    private string GetJugadorNombre(PlayerType player)
    {
        if (player == PlayerType.X)
            return ListaJugadores.FirstOrDefault(j => j.JugadorId == Partida.Jugador1Id)?.Nombres ?? "X";

        return Partida.Jugador2Id > 0
        ? ListaJugadores.FirstOrDefault(j => j.JugadorId == Partida.Jugador2Id)?.Nombres ?? "O"
        : "O";
    }

    private async Task StartGame()
    {
        if (Partida.Jugador1Id == 0 || Partida.Jugador2Id == 0 || Partida.Jugador1Id == Partida.Jugador2Id)
            return; // Validación: dos jugadores obligatorios y distintos

        // Crear partida en la base de datos
        using var db = await dbFactory.CreateDbContextAsync();
        var nuevaPartida = new Partidas
        {
            Jugador1Id = Partida.Jugador1Id,
            Jugador2Id = Partida.Jugador2Id, 
            EstadoPartida = "En curso",
            TurnoJugadorId = Partida.Jugador1Id,
            EstadoTablero = "---------"
        };

        db.Partidas.Add(nuevaPartida);
        await db.SaveChangesAsync();

        partidaId = nuevaPartida.PartidaId; // Guardamos el ID para movimientos futuros

        // Inicializar juego en memoria
        gameStarted = true;
        _currentPlayerType = PlayerType.X;
        board = new PlayerType?[9];
        winner = null;
        esEmpate = false;
    }

    private async Task HandleCellClick(int index)
    {
        if (board[index] != null || winner != null || esEmpate) return;

        // Marcar la celda en memoria
        board[index] = _currentPlayerType;

        using var db = await dbFactory.CreateDbContextAsync();

        // Determinar el jugador que hizo el movimiento
        var jugadorId = _currentPlayerType == PlayerType.X
                        ? Partida.Jugador1Id
                        : Partida.Jugador2Id ?? 0;

        // Guardar movimiento en BD
        var fila = index / 3;
        var columna = index % 3;

        var movimiento = new Movimientos
        {
            PartidaId = partidaId,
            JugadorId = jugadorId,
            PosicionFila = fila,
            PosicionColumna = columna,
            FechaMovimiento = DateTime.UtcNow
        };
        db.Movimientos.Add(movimiento);

        // Obtener partida real de la base de datos
        var partida = await db.Partidas.FindAsync(partidaId);

        // Actualizar EstadoTablero
        partida.EstadoTablero = string.Join("", board.Select(c => c.HasValue ? (c.Value == PlayerType.X ? "X" : "O") : "-"));

        // Cambiar turno 
        partida.TurnoJugadorId = _currentPlayerType == PlayerType.X
        ? partida.Jugador2Id.Value
        : partida.Jugador1Id;

        // Revisar ganador
        winner = CheckForWinner();
        if (winner != null)
        {
            partida.GanadorId = winner == PlayerType.X ? Partida.Jugador1Id : Partida.Jugador2Id;
            partida.EstadoPartida = "Finalizada";
            partida.FechaFin = DateTime.UtcNow;

            // Actualizar estadísticas
            var ganadorId = partida.GanadorId.Value;
            var ganador = await db.Jugadores.FindAsync(ganadorId);
            if (ganador != null) ganador.Victorias++;

            // Solo actualizar perdedor si existe
            int? perdedorId = ganadorId == partida.Jugador1Id ? Partida.Jugador2Id : Partida.Jugador1Id;
            if (perdedorId.HasValue)
            {
                var perdedor = await db.Jugadores.FindAsync(perdedorId.Value);
                if (perdedor != null) perdedor.Derrotas++;
            }
        }
        else if (board.All(c => c != null))
        {
            // Empate
            esEmpate = true;
            partida.EstadoPartida = "Empate";
            partida.FechaFin = DateTime.UtcNow;

            // Empates Jugador1
            var jugador1 = await db.Jugadores.FindAsync(partida.Jugador1Id);
            if (jugador1 != null) jugador1.Empates++;

            // Empates Jugador2 solo si existe
            if (Partida.Jugador2Id.HasValue)
            {
                var jugador2 = await db.Jugadores.FindAsync(partida.Jugador2Id);
                if (jugador2 != null) jugador2.Empates++;
            }
        }

        await db.SaveChangesAsync();
        // Cambiar turno en memoria
        if (Partida.Jugador2Id.HasValue)
        {
            // Dos jugadores → alternar normalmente
            _currentPlayerType = (_currentPlayerType == PlayerType.X) ? PlayerType.O : PlayerType.X;
        }
        else
        {
            _currentPlayerType = (_currentPlayerType == PlayerType.X) ? PlayerType.O : PlayerType.X;
            partida.TurnoJugadorId = Partida.Jugador1Id;
        }
    }

    private PlayerType? CheckForWinner()
    {
        var winningLines = new[]
        {
             new[] {0, 1, 2}, new[] {3, 4, 5}, new[] {6, 7, 8},// Horizontales
             new[] {0, 3, 6}, new[] {1, 4, 7}, new[] {2, 5, 8},// Verticales
             new[] {0, 4, 8}, new[] {2, 4, 6}// Diagonales
        };

        foreach (var line in winningLines)
        {
            var (a, b, c) = (line[0], line[1], line[2]);
            if (board[a].HasValue && board[a] == board[b] && board[a] == board[c])
            {
                return board[a];
            }
        }
        return null; // No hay ganador
    }

    private void RestartGame()
    {
        gameStarted = false;
        board = new PlayerType?[9];
        _currentPlayerType = PlayerType.X;
        winner = null;
        esEmpate = false;
        Partida.Jugador1Id = 0;
        Partida.Jugador2Id = 0;
    }

    private string GetPlayerClass(PlayerType? player)
    {
        if (!player.HasValue) return "";
        return player == PlayerType.X ? "player-x" : "player-o";
    }
}