@page "/Jugador/Edit/{JugadorId:int}"

@inject JugadoresService jugadoresService
@inject NavigationManager Navigation
@inject ToastService toastService

@*HTML*@
<PageTitle>Modificar</PageTitle>
<EditForm Model="Jugador" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <ValidationSummary/>

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Modificar Jugador</h5>
            </div>
            @*Body*@
            <div class="card-body">
              @*JugadorId*@
              <div class="mb-3">
                    <label class="form-label"><strong>JugadorId</strong></label>
                    <InputNumber class=" form-control" @bind-Value="Jugador.JugadorId" readonly />
                </div>
              @*Nombres*@
               <div class="mb-3">
                    <label class="col-form-label"><strong>Nombres</strong></label>
                    <InputText class="form-control" @bind-Value="Jugador.Nombres"></InputText>
                    <ValidationMessage For="(() => Jugador.Nombres)" />
                </div>
               @*Partidas*@
                <div class="mb-3">
                    <label class="col-form-label"><strong>Partidas</strong></label>
                    <InputNumber class="form-control" @bind-Value="Jugador.Partidas"></InputNumber>
                    <ValidationMessage For="(() => Jugador.Partidas)" />
                </div>
            </div>
            @*Footer*@
            <div class="card-footer text-center mt-2">
                <a href="/Jugador/Index" class="btn btn-secondary"><span class="bi bi-arrow-left"></span>Volver</a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int JugadorId { get; set; }
    public Jugadores Jugador { get; set; } = new Jugadores();

    protected override async Task OnInitializedAsync()
    {
        var Jugador = await jugadoresService.BuscarId(JugadorId);
    }

    public async Task Modificar()
    {
        if (await Validar())
        {
            await toastService.Warning("Ya existe un jugador con ese nombre");
            return;
        }
        var modificado = await jugadoresService.Guardar(Jugador);

        if (modificado)
        {
            await toastService.Success($"El jugador {Jugador.Nombres} se ha modificado correctamente");
            Navigation.NavigateTo("/Jugador/Index");
        }
        else
        {
            await toastService.Error("No se ha podido modificar correctamente");
        }
    }

    public async Task<bool> Validar()
    {
        var existe = await jugadoresService.ExisteNombre(Jugador.JugadorId, Jugador.Nombres);
        return existe;
    }

    private async Task Eliminar()
    {
        var eliminado = await jugadoresService.Eliminar(Jugador.JugadorId);

        if (eliminado)
        {
            await toastService.Success($"El jugador {Jugador.Nombres} se ha eliminado correctamente");
            Navigation.NavigateTo("/Jugador/Index");
        }
        else
        {
            await toastService.Error("No se ha podido eliminar correctamente");
        }
    }

    public void Volver()
    {
        Navigation.NavigateTo("/Jugador/Index");
    }
}
