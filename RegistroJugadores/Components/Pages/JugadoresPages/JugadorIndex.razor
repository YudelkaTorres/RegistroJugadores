@page "/Jugador/Index"

@inject JugadoresService jugadoresService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Index de Jugadores</PageTitle>

<div class="card shadow-lg mt-4">
    <div class="card-header bg-white text-center ">
        <h5 class="card-title">Index de Jugadores</h5>
    </div>

    <div class="card-body">
        @* Filtros *@
        <div class="row mb-3 align-items-center">
            <div class="col-3">
                <label class="form-label"><strong>Filtrar por:</strong></label>
                <InputSelect class="form-select" @bind-Value="Filtro">
                    <option value="" selected disabled>Elija una opción</option>
                    <option value="JugadorId">JugadorId</option>
                    <option value="Nombres">Nombres</option>
                </InputSelect>
            </div>
            <div class="col-4">
                <label class="form-label"><strong>Búsqueda:</strong></label>
                <div class="input-group">
                    <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                    <button type="button" class="btn btn-primary" @onclick="CargarJugadores">
                        <i class="bi bi-search"></i> Buscar
                    </button>
                </div>
            </div>
            <div class="col-md-4 text-end mt-4 mt-md-0">
                <a href="/Jugador/Create" class="btn btn-success">
                    <i class="bi bi-plus-circle me-1"></i> Crear
                </a>
            </div>
        </div>

        @* Tabla de jugadores *@
        <div class="table-responsive">
            <table class="table table-bordered text-center align-middle">
                <thead class="table-light">
                    <tr>
                        <th>JugadorId</th>
                        <th>Nombres</th>
                        <th>Victorias</th>
                        <th>Editar</th>
                        <th>Eliminar</th>
                    </tr>
                </thead>
                <tbody>
                    @if (ListaJugadores.Count == 0)
                    {
                        <tr>
                            <td colspan="5" class="text-muted">No se encontraron jugadores.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var jugador in ListaJugadores)
                        {
                            <tr>
                                <td>@jugador.JugadorId</td>
                                <td>@jugador.Nombres</td>
                                <td>@jugador.Victorias</td>
                                <td>
                                    <a href="/Jugador/Edit/@jugador.JugadorId" class="btn btn-outline-success btn-sm">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                </td>
                                <td>
                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => MostrarModalEliminar(jugador)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="card-footer text-end">
        <p>Total de Jugadores: @ListaJugadores.Count()</p>
    </div>
</div>

@* Modal Bootstrap para eliminar *@
<div class="modal fade @(MostrarPanelEliminar ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Eliminar Jugador</h5>
                <button type="button" class="btn-close" @onclick="CancelarEliminar"></button>
            </div>
            <div class="modal-body">
                <p class="fw-bold text-danger">¿Estás seguro de que deseas eliminar este jugador?</p>
                @if (JugadorSeleccionado != null)
                {
                    <ul class="list-group">
                    <li class="list-group-item"><strong>JugadorId:</strong> @JugadorSeleccionado?.JugadorId</li>
                    <li class="list-group-item"><strong>Nombre:</strong> @JugadorSeleccionado?.Nombres</li>
                    <li class="list-group-item"><strong>:</strong> @JugadorSeleccionado?.Victorias</li>
                    </ul>
                }
                else
                {
                    <p class="text-muted">No hay jugador seleccionado.</p>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CancelarEliminar">Cancelar</button>
                <button class="btn btn-danger" @onclick="ConfirmarEliminar">Eliminar</button>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Jugadores> ListaJugadores { get; set; } = new List<Jugadores>();
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    private bool MostrarPanelEliminar { get; set; } = false;
    private Jugadores? JugadorSeleccionado { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarJugadores();
    }

    private async Task CargarJugadores()
    {
        try
        {
            var lista = await jugadoresService.Listar(j => true);

            if (!string.IsNullOrWhiteSpace(ValorFiltro))
            {
                if (Filtro == "JugadorId" && int.TryParse(ValorFiltro, out int id))
                {
                    lista = lista.Where(j => j.JugadorId == id).ToList();
                }
                else if (Filtro == "Nombres")
                {
                    lista = lista.Where(j => j.Nombres?.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase) ?? false).ToList();
                }
            }

            ListaJugadores = lista;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"[Error -CargarJugadores] {ex.Message}");
            ListaJugadores = new List<Jugadores>();
        }
    }


    private void MostrarModalEliminar(Jugadores jugador)
    {
        JugadorSeleccionado = jugador;
        MostrarPanelEliminar = true;
    }

    private void CancelarEliminar()
    {
        MostrarPanelEliminar = false;
        JugadorSeleccionado = null;
    }

    private async Task ConfirmarEliminar()
    {
        if (JugadorSeleccionado != null)
        {
            try
            {
                var eliminado = await jugadoresService.Eliminar(JugadorSeleccionado.JugadorId);

                if (eliminado)
                {
                    await JS.InvokeVoidAsync("alert", "Jugador eliminado correctamente");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "No se pudo eliminar el jugador");
                }
                await CargarJugadores();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"[Error - confirmarEliminar] {ex.Message}");
            }
            finally
            {
                CancelarEliminar();
            }

        }
    }

    public void Editar(int jugadorId)
    {
        Navigation.NavigateTo($"/Jugador/Edit/{jugadorId}");
    }

    public void Crear()
    {
        Navigation.NavigateTo("/Jugador/Create/");
    }
}
