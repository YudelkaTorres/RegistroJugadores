@page "/Jugador/Index"

@inject JugadoresService jugadoresService
@inject NavigationManager Navigation

<PageTitle>Registro de Jugadores</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        @*Header*@
        <div class="card-header space-between">
            <h5 class="card-title">Registro de Jugadores</h5>
            <a href="/Jugador/Create" class=" btn btn-primary"><span class="bi bi-plus-square mt-3"></span> Crear</a>
        </div>
        @*Body*@
        <div class="card-body">
            @*Labels*@
            <div class="row">
                @*Filtar por*@
                <div class="col-3">
                    <label class="form-label" for="Filtro"><strong>Filtrar por</strong></label>
                </div>
                @*ValorFiltro*@
                <div class="col-4">
                    <label class="col-form-label"><strong>B&uacute;squeda</strong></label>
                </div>
                @*Inputs y Buttons*@
                <div class="row align-items-center">
                    @*Filtro*@
                    <div class="col-3">
                        <InputSelect class="form-select" @bind-Value="Filtro">
                            <option value="" selected disabled>Elija una opci&oacute;n</option>
                            <option value="JugadorId">JugadorId</option>
                            <option value="Nombres">Nombres</option>
                        </InputSelect>
                    </div>
                @*Búsqueda*@
                    <div class="col-4">
                        <div class="input-group">
                            <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                            <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                        </div>
                    </div>
                    <div class="col-auto">
                        <button type="button" class="btn btn-outline-secondary bi bi-arrow-counterclockwise" @onclick="Restablecer"> Restablecer</button>
                    </div>
                </div>
           
                @*Tabla*@
                <table class="table table-hover mt-3">
                    <thead class="table table-striped text-black">
                        <tr>
                            <th>JugadorId</th>
                            <th>Nombres</th>
                            <th>Partidas</th>
                            <th>Opciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var jugador in ListaJugadores)
                        {
                            <tr>
                                <td>@jugador.JugadorId</td>
                                <td>@jugador.Nombres</td>
                                <td>@jugador.Partidas</td>

                                <td class="text-center">
                                    <a href="/Jugador/Edit/@jugador.JugadorId" class="btn btn-outline-primary bi bi-pencil-square"></a>
                                    <button type="button" class="btn btn-outline-danger bi bi-trash2" @onclick="()=> Eliminar(jugador.JugadorId)"></button>
                                    <button trype="button" class="btn btn-outline-warning bi bi-pencil-square" @onclick="()=> Editar(jugador.JugadorId)"></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            @*Footer*@
            <div class="card-footer">
                <label>Total de Jugadores: @ListaJugadores.Count()</label>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Jugadores> ListaJugadores { get; set; } = new List<Jugadores>();

    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ListaJugadores = await jugadoresService.Listar(j => j.JugadorId > 0);
    }

    private async Task Buscar()
    {
        if (!string.IsNullOrWhiteSpace(ValorFiltro))
        {
            if (Filtro == "JugadorId" && int.TryParse(ValorFiltro, out int id))
            {
                ListaJugadores = await jugadoresService.Listar(j => j.JugadorId == id);
            }
            else if (Filtro == "Nombres")
            {
                ListaJugadores = await jugadoresService.Listar(j => j.Nombres.ToLower().Contains(ValorFiltro.ToLower()));
            }
        }
        else
        {
            ListaJugadores = await jugadoresService.Listar(j => j.JugadorId > 0);
        }
    }

    private async Task Restablecer()
    {
        ListaJugadores = await jugadoresService.Listar(j => j.JugadorId > 0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }

    public void Eliminar(int jugadorId)
    {
        Navigation.NavigateTo($"/Jugador/Delete/{jugadorId}");
    }

    public void Editar(int jugadorId)
    {
        Navigation.NavigateTo($"/Jugador/Edit/{jugadorId}");
    }
}
